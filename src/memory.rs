use std::fs::{self, File};
use std::io;

pub const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];

/// The amount of memory that the CHIP-8 can hold
const MAX_RAM: usize = 4096;

/// CHIP-8 programs start at location 0x200
const RESERVED: usize = 0x200;

#[derive(Debug)]
pub struct Memory {
    // internal memory capped at 4096 bytes.
    pub ram: [u16; MAX_RAM],
}

impl Memory {
    pub fn new() -> Self {
       Self { ram: [0; MAX_RAM] } 
    }

    pub fn load_font(&mut self, font_set: [u8; 80]) -> io::Result<()> {
        for i in 0..FONT_SET.len() {
            self.ram[i+0x50] = font_set[i] as u16;
        }

        Ok(())
    }

    // Load the rom into memory.
    pub fn load_rom(&mut self, rom: &str) -> io::Result<()> {
        let bytes = fs::read(rom)?;
        for (i, opcode) in bytes.iter().enumerate() {
            self.ram[RESERVED + i] = *opcode as u16;
        }

        Ok(())
    }
}
